{"remainingRequest":"/home/runner/work/U1_Investigacion_Operaciones/U1_Investigacion_Operaciones/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U1_Investigacion_Operaciones/U1_Investigacion_Operaciones/src/views/curso/Tema1.vue?vue&type=template&id=66b44c6a&lang=pug&","dependencies":[{"path":"/home/runner/work/U1_Investigacion_Operaciones/U1_Investigacion_Operaciones/src/views/curso/Tema1.vue","mtime":1745108758575},{"path":"/home/runner/work/U1_Investigacion_Operaciones/U1_Investigacion_Operaciones/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Investigacion_Operaciones/U1_Investigacion_Operaciones/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U1_Investigacion_Operaciones/U1_Investigacion_Operaciones/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U1_Investigacion_Operaciones/U1_Investigacion_Operaciones/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Investigacion_Operaciones/U1_Investigacion_Operaciones/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubyg6c3ViVGl0dWxvPSInMS4gRGVzaWd1YWxkYWRlcyBlIEluZWN1YWNpb25lcywgdmFsb3IgYWJzb2x1dG8nIikKICAuY29udGFpbmVyLnRhcmpldGEudGFyamV0YS0tYmxhbmNhLnAtNC5wLW1kLTUub3ZlcmZsb3ctaGlkZGVuCgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLXN0YXJ0Lm1iLTUKICAgICAgLmNvbC1sZy00CiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS8xLnBuZyIsIGFsdD0iIikKICAgICAgLmNvbC1sZy04CiAgICAgICAgcC5tYi00ICBMYSAjW3N0cm9uZyBJbnZlc3RpZ2FjacOzbiBkZSBPcGVyYWNpb25lcyAoSU8pXSwgZXMgdW5hIGRpc2NpcGxpbmEgcXVlIGFwbGljYSB0w6ljbmljYXMgYW5hbMOtdGljYXMgYXZhbnphZGFzIHBhcmEgbGEgdG9tYSBkZSBkZWNpc2lvbmVzIHkgbGEgb3B0aW1pemFjacOzbiBkZSBwcm9jZXNvcyBlbiBsYXMgb3JnYW5pemFjaW9uZXMuIFN1IG9yaWdlbiBzZSByZW1vbnRhIGEgbGEgU2VndW5kYSBHdWVycmEgTXVuZGlhbCwgY3VhbmRvIHNlIHV0aWxpesOzIHBhcmEgbWVqb3JhciBsYSBlc3RyYXRlZ2lhIHkgbGEgbG9nw61zdGljYSBtaWxpdGFyLiBQb3N0ZXJpb3JtZW50ZSwgZXN0YXMgdMOpY25pY2FzIGZ1ZXJvbiBhZG9wdGFkYXMgZW4gZWwgw6FtYml0byBlbXByZXNhcmlhbCB5IGd1YmVybmFtZW50YWwsIHBhcmEgbWVqb3JhciBsYSBlZmljaWVuY2lhIGVuIGxhIGFzaWduYWNpw7NuIGRlIHJlY3Vyc29zIHkgbGEgcGxhbmlmaWNhY2nDs24gb3BlcmF0aXZhLgoKICAgICAgICAuYmctY29sb3ItMy5wLTQubXktNAogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1zdGFydAogICAgICAgICAgICAuY29sLWxnLWF1dG8KICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS8yLnN2ZyIsIHN0eWxlPSJtYXgtd2lkdGg6IDkwcHgiKS5teC1hdXRvCiAgICAgICAgICAgIC5jb2wtbGcKICAgICAgICAgICAgICBwLm1iLTAgRW4gbGEgYWN0dWFsaWRhZCwgbGEgSU8gc2UgaGEgY29udmVydGlkbyBlbiB1bmEgaGVycmFtaWVudGEgZnVuZGFtZW50YWwgcGFyYSBsYSBnZXN0acOzbiBlbXByZXNhcmlhbCB5IGxhIHJlc29sdWNpw7NuIGRlIHByb2JsZW1hcyBjb21wbGVqb3MsIGVuIGRpdmVyc2FzIGluZHVzdHJpYXMuIEEgdHJhdsOpcyBkZWwgdXNvIGRlIG1vZGVsb3MgbWF0ZW3DoXRpY29zLCBtw6l0b2RvcyBlc3RhZMOtc3RpY29zIHkgaGVycmFtaWVudGFzIGNvbXB1dGFjaW9uYWxlcywgbGEgSU8gcGVybWl0ZSBhIGxhcyBlbXByZXNhcyBtZWpvcmFyIHN1IGNvbXBldGl0aXZpZGFkLCByZWR1Y2lyIGNvc3Rvcywgb3B0aW1pemFyIGxhIHByb2R1Y2Npw7NuIHkgbWF4aW1pemFyIGxhIHV0aWxpemFjacOzbiBkZSBzdXMgcmVjdXJzb3MgZGlzcG9uaWJsZXMuCgogICAgICAgIHAgQSBjb250aW51YWNpw7NuLCBzZSBwcmVzZW50YW4gdW5hIGzDrW5lYSBkZSB0aWVtcG8gY29uIGxvcyBoaXRvcyBjbGF2ZSBlbiBsYSBldm9sdWNpw7NuIGRlIGxhIEludmVzdGlnYWNpw7NuIGRlIE9wZXJhY2lvbmVzOgogICAgICAgIAoKICAgIC5yb3cuYWxpZ24taXRlbXMtc3RhcnQubWItNQogICAgICAuY29sLWxnLTgKCiAgICAgICAgTGluZWFUaWVtcG9ELmxhcmdlKGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikKICAgICAgICAgIHAobnVtZXJvPSIxIiB0aXR1bG89IjE5NDBzIikgU2UgZGVzYXJyb2xsYW4gbG9zIHByaW1lcm9zIG1vZGVsb3MgZGUgSU8gYXBsaWNhZG9zIGEgbGEgcGxhbmlmaWNhY2nDs24gbG9nw61zdGljYSB5IG1pbGl0YXIgZHVyYW50ZSBsYSBTZWd1bmRhIEd1ZXJyYSBNdW5kaWFsLgogICAgICAgICAgcChudW1lcm89IjIiIHRpdHVsbz0iMTk1MHMiKSBTZSBpbnRyb2R1Y2UgbGEgcHJvZ3JhbWFjacOzbiBsaW5lYWwgeSBlbCBtw6l0b2RvIHNpbXBsZXgsIHF1ZSBwZXJtaXRlbiByZXNvbHZlciBwcm9ibGVtYXMgZGUgb3B0aW1pemFjacOzbiBjb24gcmVzdHJpY2Npb25lcy4KICAgICAgICAgIHAobnVtZXJvPSIzIiB0aXR1bG89IjE5NjBzIikgTGEgSU8gc2UgY29udmllcnRlIGVuIHVuYSBkaXNjaXBsaW5hIGFjYWTDqW1pY2EsIGNvbiBsYSBjcmVhY2nDs24gZGUgZGVwYXJ0YW1lbnRvcyBlc3BlY2lhbGl6YWRvcyBlbiB1bml2ZXJzaWRhZGVzIGRlIHByZXN0aWdpby4KICAgICAgICAgIHAobnVtZXJvPSI0IiB0aXR1bG89IjE5NzBzIikgTGEgSU8gc2UgY29udmllcnRlIGVuIHVuYSBkaXNjaXBsaW5hIGFjYWTDqW1pY2EsIGNvbiBsYSBjcmVhY2nDs24gZGUgZGVwYXJ0YW1lbnRvcyBlc3BlY2lhbGl6YWRvcyBlbiB1bml2ZXJzaWRhZGVzIGRlIHByZXN0aWdpby4KCiAgICAgICAgCiAgICAgIC5jb2wtbGctNAogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvMy5wbmciLCBhbHQ9IiIpLm1iLTQubWItbGctMAogICAgCgogICAgLnJvdy5hbGlnbi1pdGVtcy1zdGFydC5tYi01ICAgICAgICAKICAgICAgLmNvbC1sZy00CiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS80LnBuZyIsIGFsdD0iIikubWItNC5tYi1sZy0wCiAgICAgIAogICAgICAuY29sLWxnLTgKICAgICAgICBMaW5lYVRpZW1wb0QubGFyZ2UoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKQogICAgICAgICAgcChudW1lcm89IjUiIHRpdHVsbz0iMTk4MHMiKSBTZSBkZXNhcnJvbGxhbiBtb2RlbG9zIGF2YW56YWRvcyBkZSBwcm9ncmFtYWNpw7NuIG5vIGxpbmVhbCB5IGhldXLDrXN0aWNhcyBwYXJhIHByb2JsZW1hcyBtw6FzIGNvbXBsZWpvcy4KICAgICAgICAgIHAobnVtZXJvPSI2IiB0aXR1bG89IjE5OTBzIikgU2UgaW50ZWdyYW4gbnVldmFzIHTDqWNuaWNhcyBjb21vIGxhIGludGVsaWdlbmNpYSBhcnRpZmljaWFsLCBsb3MgYWxnb3JpdG1vcyBnZW7DqXRpY29zIHkgbGEgb3B0aW1pemFjacOzbiBjb21iaW5hdG9yaWEuCiAgICAgICAgICBwKG51bWVybz0iNyIgdGl0dWxvPSIyMDAwcyIpIENvbiBlbCBhdWdlIGRlbCBCaWcgRGF0YSwgbGEgSU8gc2UgYXBveWEgZW4gaGVycmFtaWVudGFzIGNvbXB1dGFjaW9uYWxlcyBhdmFuemFkYXMgcGFyYSBhbmFsaXphciBncmFuZGVzIHZvbMO6bWVuZXMgZGUgaW5mb3JtYWNpw7NuLgogICAgICAgICAgcChudW1lcm89IjgiIHRpdHVsbz0iMjAyMHMiKSBMYSBjb21wdXRhY2nDs24gY3XDoW50aWNhIGNvbWllbnphIGEgc2VyIGV4cGxvcmFkYSBjb21vIHVuYSBzb2x1Y2nDs24gcGFyYSBsYSByZXNvbHVjacOzbiBkZSBwcm9ibGVtYXMgZGUgb3B0aW1pemFjacOzbiBhIGdyYW4gZXNjYWxhLgoKCiAgICAjdF8xXzEudGl0dWxvLXNlZ3VuZG8oZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICBoMiAjW3NwYW4gMS4xXSBEZWZpbmljacOzbiB5IG9iamV0aXZvcyBlbiBsYSBhZG1pbmlzdHJhY2nDs24gZGUgZW1wcmVzYXMKCgogICAgLnJvdy5hbGlnbi1pdGVtcy1zdGFydC5tYi01CiAgICAgIC5jb2wtbGctOAogICAgICAgIHAubWItNCBMYSBJbnZlc3RpZ2FjacOzbiBkZSBPcGVyYWNpb25lcyBzZSBkZWZpbmUgY29tbyBlbCB1c28gZGUgbW9kZWxvcyBtYXRlbcOhdGljb3MsIHTDqWNuaWNhcyBkZSBvcHRpbWl6YWNpw7NuIHkgc2ltdWxhY2lvbmVzIGNvbXB1dGFjaW9uYWxlcywgcGFyYSBhbmFsaXphciBwcm9ibGVtYXMgYWRtaW5pc3RyYXRpdm9zIGNvbXBsZWpvcyB5IGZvcm11bGFyIGVzdHJhdGVnaWFzIMOzcHRpbWFzIHBhcmEgc3UgcmVzb2x1Y2nDs24uIFNlZ8O6biBUYWhhICgyMDEyKSwgbGEgSU8gcHJvcG9yY2lvbmEgdW4gZW5mb3F1ZSBlc3RydWN0dXJhZG8geSBjaWVudMOtZmljbyBwYXJhIGxhIHRvbWEgZGUgZGVjaXNpb25lcywgbG8gcXVlIHBlcm1pdGUgYSBsYXMgb3JnYW5pemFjaW9uZXMgbWVqb3JhciBsYSBlZmljaWVuY2lhIHkgZWZpY2FjaWEgZGUgc3VzIHByb2Nlc29zLgoKICAgICAgICBwIExvcyBwcmluY2lwYWxlcyBvYmpldGl2b3MgZGUgbGEgSU8gZW4gbGEgYWRtaW5pc3RyYWNpw7NuIGRlIGVtcHJlc2FzIGluY2x1eWVuOgogICAgICAuY29sLWxnLTQKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzUucG5nIiwgYWx0PSIiKS5tYi00Lm1iLWxnLTAKCgogICAgLmJnLWZ1bGwtd2lkdGguYmctY29sb3ItaW5mbwogICAgICAucHgtNC5weC1tZC01LnB0LTQucHQtbWQtNQogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctMTAKICAgICAgICAgICAgSW1hZ2VuSW5mb2dyYWZpY2EuY29sb3Itc2VjdW5kYXJpbwogICAgICAgICAgICAgIHRlbXBsYXRlKHYtc2xvdDppbWFnZW4pCiAgICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTEvaW5mbzEucG5nJywgYWx0PScnLCBzdHlsZT0ibWF4LXdpZHRoOiA3MzBweDsiKS5teC1hdXRvCiAgICAKICAgICAgICAgICAgICAuYmctY29sb3Itd2hpdGUuYm94LXNoYWRvdy5wLTMoeD0iMTclIiB5PSI3NyUiIG51bWVybz0iKyIpCiAgICAgICAgICAgICAgICBoNSAxLiBPcHRpbWl6YWNpw7NuIGRlIHByb2Nlc29zCiAgICAgICAgICAgICAgICBwIElkZW50aWZpY2FyIHkgZWxpbWluYXIgaW5lZmljaWVuY2lhcyBlbiBsb3MgcHJvY2Vzb3MgZW1wcmVzYXJpYWxlcywgcGFyYSBtZWpvcmFyIGxhIHByb2R1Y3RpdmlkYWQgeSBtaW5pbWl6YXIgZGVzcGVyZGljaW9zLgoKICAgICAgICAgICAgICAuYmctY29sb3Itd2hpdGUuYm94LXNoYWRvdy5wLTMoeD0iMTclIiB5PSIzNCUiIG51bWVybz0iKyIpCiAgICAgICAgICAgICAgICBoNSAyLiBUb21hIGRlIGRlY2lzaW9uZXMgYmFzYWRhIGVuIGRhdG9zCiAgICAgICAgICAgICAgICBwIFV0aWxpemFjacOzbiBkZSBtb2RlbG9zIGN1YW50aXRhdGl2b3MgcGFyYSByZWR1Y2lyIGxhIGluY2VydGlkdW1icmUgeSBtZWpvcmFyIGxhIGNhbGlkYWQgZGUgbGFzIGRlY2lzaW9uZXMgZXN0cmF0w6lnaWNhcy4KICAgIAogICAgICAgICAgICAgIC5iZy1jb2xvci13aGl0ZS5ib3gtc2hhZG93LnAtMyh4PSI0OSUiIHk9IjE0JSIgbnVtZXJvPSIrIikKICAgICAgICAgICAgICAgIGg1IDMuIE1lam9yYSBlbiBsYSBwbGFuaWZpY2FjacOzbiB5IGNvbnRyb2wKICAgICAgICAgICAgICAgIHAgRGVzYXJyb2xsbyBkZSBlc3RyYXRlZ2lhcyDDs3B0aW1hcyBlbiBsYSBnZXN0acOzbiBlbXByZXNhcmlhbCwgbWVkaWFudGUgbW9kZWxvcyBwcmVkaWN0aXZvcy4KICAgIAogICAgICAgICAgICAgIC5iZy1jb2xvci13aGl0ZS5ib3gtc2hhZG93LnAtMyh4PSI4MCUiIHk9IjM0JSIgbnVtZXJvPSIrIikKICAgICAgICAgICAgICAgIGg1IDQuIEFuw6FsaXNpcyB5IHNpbXVsYWNpw7NuIGRlIGVzY2VuYXJpb3MKICAgICAgICAgICAgICAgIHAgRXZhbHVhY2nDs24gZGUgZGlzdGludGFzIGFsdGVybmF0aXZhcyBlc3RyYXTDqWdpY2FzLCBwYXJhIGRldGVybWluYXIgbGEgb3BjacOzbiBtw6FzIGJlbmVmaWNpb3NhLgogICAgCiAgICAgICAgICAgICAgLmJnLWNvbG9yLXdoaXRlLmJveC1zaGFkb3cucC0zKHg9IjgyJSIgeT0iNzclIiBudW1lcm89IisiKQogICAgICAgICAgICAgICAgaDUgNS4gQXV0b21hdGl6YWNpw7NuIGRlIHByb2Nlc29zCiAgICAgICAgICAgICAgICBwIEltcGxlbWVudGFjacOzbiBkZSBoZXJyYW1pZW50YXMgY29tcHV0YWNpb25hbGVzIHBhcmEgbWVqb3JhciBsYSB2ZWxvY2lkYWQgeSBsYSBwcmVjaXNpw7NuLCBlbiBsYSB0b21hIGRlIGRlY2lzaW9uZXMuCiAgICAKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWNvbG9yLTIubWItNQogICAgICAucHgtNC5weC1tZC01LnB5LTQKICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzYuc3ZnIiwgc3R5bGU9Im1heC13aWR0aDogOTBweCIpLm14LWF1dG8KICAgICAgICAgIC5jb2wtbGcKICAgICAgICAgICAgcC5tYi0wIExhIElPIGVzIHV0aWxpemFkYSBlbiBzZWN0b3JlcyBjb21vIGxhIG1hbnVmYWN0dXJhLCBlbCB0cmFuc3BvcnRlLCBsYSBzYWx1ZCwgbGEgbG9nw61zdGljYSwgbGFzIHRlbGVjb211bmljYWNpb25lcyB5IGxhIGFkbWluaXN0cmFjacOzbiBww7pibGljYSwgZW50cmUgb3Ryb3MsIHBhcmEgYWJvcmRhciBwcm9ibGVtYXMgY29tcGxlam9zIGRlIGFzaWduYWNpw7NuIGRlIHJlY3Vyc29zLCBwcm9ncmFtYWNpw7NuIGRlIGFjdGl2aWRhZGVzIHkgb3B0aW1pemFjacOzbiBkZSByZWRlcy4KICAgIAoKICAgICN0XzFfMi50aXR1bG8tc2VndW5kbyhkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgIGgyICNbc3BhbiAxLjJdIEltcG9ydGFuY2lhIGRlIGxhIEludmVzdGlnYWNpw7NuIGRlIE9wZXJhY2lvbmVzIGVuIGxhIHRvbWEgZGUgZGVjaXNpb25lcyBlbXByZXNhcmlhbGVzCiAgICAKCiAgICBwIExhIEludmVzdGlnYWNpw7NuIGRlIE9wZXJhY2lvbmVzIGp1ZWdhIHVuIHBhcGVsIGNsYXZlIGVuIGxhIHRvbWEgZGUgZGVjaXNpb25lcyBlbXByZXNhcmlhbGVzLCBkYWRvIHF1ZSBwZXJtaXRlIGEgbG9zIGFkbWluaXN0cmFkb3JlcyBhbmFsaXphciBtw7psdGlwbGVzIGVzY2VuYXJpb3MsIHByZXZlciBjb25zZWN1ZW5jaWFzIHkgc2VsZWNjaW9uYXIgbGEgbWVqb3IgYWx0ZXJuYXRpdmEgYmFzYWRhIGVuIGNyaXRlcmlvcyBjdWFudGlmaWNhYmxlcy4gR3JhY2lhcyBhIHN1IGVuZm9xdWUgYmFzYWRvIGVuIGRhdG9zIHkgdMOpY25pY2FzIG1hdGVtw6F0aWNhcywgbGEgSU8gYXl1ZGEgYSByZWR1Y2lyIGxhIHN1YmpldGl2aWRhZCBlbiBsYSB0b21hIGRlIGRlY2lzaW9uZXMgeSBhIG1lam9yYXIgbGEgZWZpY2llbmNpYSBvcGVyYXRpdmEgZGUgbGFzIG9yZ2FuaXphY2lvbmVzLgogICAgCiAgICBwICNbc3Ryb25nIEFsZ3VuYXMgZGUgbGFzIGFwbGljYWNpb25lcyBtw6FzIHJlbGV2YW50ZXMgZGUgbGEgSU8gZW4gbGEgdG9tYSBkZSBkZWNpc2lvbmVzIGVtcHJlc2FyaWFsZXMsIGluY2x1eWVuOl0KCiAgICAuYmctZnVsbC13aWR0aC0yLmJnLWZvbmRvLTIubWItNQogICAgICAucHgtNC5weC1tZC01LnBiLW1kLTMKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNQogICAgICAgICAgICAKICAgICAgICAgIC5jb2wtbGctNAogICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMS83LnBuZycsIGFsdD0nJykKICAgICAgICAgIC5jb2wtbGctOAogICAgCiAgICAgICAgICAgIFNseWRlckYoY29sdW1uYXM9ImNvbC0xMiBjb2wtbGctNiIpCiAgICAgICAgICAgICAgLmJnLWNvbG9yLXdoaXRlLnAtNC5oLTEwMC5zaGFkb3ctYXBwCiAgICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMS9pY29uby0xLnN2ZycgYWx0PSdBdmF0YXJUb3AnIHN0eWxlPSJtYXgtd2lkdGg6IDkwcHgiKS5teC1hdXRvLm1iLTMKICAgICAgICAgICAgICAgIGg0LnRleHQtY2VudGVyLm1iLTQgR2VzdGnDs24gZGUgbGEgY2FkZW5hIGRlIHN1bWluaXN0cm8KICAgICAgICAgICAgICAgIHAudGV4dC1jZW50ZXIgRGlzZcOxbyBkZSB0dXJub3MgeSBkaXN0cmlidWNpw7NuIGRlbCB0cmFiYWpvIGRlIG1hbmVyYSBlZmljaWVudGUsIHBhcmEgYXVtZW50YXIgbGEgcHJvZHVjdGl2aWRhZCB5IG1lam9yYXIgZWwgYmllbmVzdGFyIGRlIGxvcyBlbXBsZWFkb3MuCiAgICAgICAgICAgICAgLmJnLWNvbG9yLXdoaXRlLnAtNC5oLTEwMC5zaGFkb3ctYXBwCiAgICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMS9pY29uby0yLnN2ZycgYWx0PSdBdmF0YXJUb3AnIHN0eWxlPSJtYXgtd2lkdGg6IDkwcHgiKS5teC1hdXRvLm1iLTMKICAgICAgICAgICAgICAgIGg0LnRleHQtY2VudGVyLm1iLTQgR2VzdGnDs24gZGUgaW52ZW50YXJpb3MKICAgICAgICAgICAgICAgIHAudGV4dC1jZW50ZXIgSW1wbGVtZW50YWNpw7NuIGRlIG1vZGVsb3MgcGFyYSBkZXRlcm1pbmFyIGxvcyBuaXZlbGVzIMOzcHRpbW9zIGRlIHN0b2NrIHkgZXZpdGFyLCB0YW50byBlbCBkZXNhYmFzdGVjaW1pZW50byBjb21vIGVsIGV4Y2VzbyBkZSBpbnZlbnRhcmlvLgogICAgICAgICAgICAgIC5iZy1jb2xvci13aGl0ZS5wLTQuaC0xMDAuc2hhZG93LWFwcAogICAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTEvaWNvbm8tMy5zdmcnIGFsdD0nQXZhdGFyVG9wJyBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0by5tYi0zCiAgICAgICAgICAgICAgICBoNC50ZXh0LWNlbnRlci5tYi00IFBsYW5pZmljYWNpw7NuIGRlIGxhIHByb2R1Y2Npw7NuCiAgICAgICAgICAgICAgICBwLnRleHQtY2VudGVyIEFzaWduYWNpw7NuIGVmaWNpZW50ZSBkZSByZWN1cnNvcyB5IG9wdGltaXphY2nDs24gZGUgbGEgcHJvZ3JhbWFjacOzbiBkZSBsYSBwcm9kdWNjacOzbiwgcGFyYSBjdW1wbGlyIGNvbiBsYSBkZW1hbmRhIHkgcmVkdWNpciBsb3MgZGVzcGVyZGljaW9zLgogICAgICAgICAgICAgIC5iZy1jb2xvci13aGl0ZS5wLTQuaC0xMDAuc2hhZG93LWFwcAogICAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTEvaWNvbm8tNC5zdmcnIGFsdD0nQXZhdGFyVG9wJyBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0by5tYi0zCiAgICAgICAgICAgICAgICBoNC50ZXh0LWNlbnRlci5tYi00IE9wdGltaXphY2nDs24gZGUgcnV0YXMgZGUgdHJhbnNwb3J0ZQogICAgICAgICAgICAgICAgcC50ZXh0LWNlbnRlciBVc28gZGUgYWxnb3JpdG1vcyBkZSBiw7pzcXVlZGEgeSBvcHRpbWl6YWNpw7NuIHBhcmEgcmVkdWNpciBjb3N0b3MgbG9nw61zdGljb3MgeSB0aWVtcG9zIGRlIGVudHJlZ2EsIGVuIGxhIGRpc3RyaWJ1Y2nDs24gZGUgYmllbmVzIHkgc2VydmljaW9zLgogICAgICAgICAgICAgIC5iZy1jb2xvci13aGl0ZS5wLTQuaC0xMDAuc2hhZG93LWFwcAogICAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTEvaWNvbm8tNS5zdmcnIGFsdD0nQXZhdGFyVG9wJyBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0by5tYi0zCiAgICAgICAgICAgICAgICBoNC50ZXh0LWNlbnRlci5tYi00IFByb2dyYW1hY2nDs24geSBhc2lnbmFjacOzbiBkZSBwZXJzb25hbAogICAgICAgICAgICAgICAgcC50ZXh0LWNlbnRlciBEaXNlw7FvIGRlIHR1cm5vcyB5IGRpc3RyaWJ1Y2nDs24gZGVsIHRyYWJham8gZGUgbWFuZXJhIGVmaWNpZW50ZSwgcGFyYSBhdW1lbnRhciBsYSBwcm9kdWN0aXZpZGFkIHkgbWVqb3JhciBlbCBiaWVuZXN0YXIgZGUgbG9zIGVtcGxlYWRvcy4KICAgICAgICAgICAgICAuYmctY29sb3Itd2hpdGUucC00LmgtMTAwLnNoYWRvdy1hcHAKICAgICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWExL2ljb25vLTYuc3ZnJyBhbHQ9J0F2YXRhclRvcCcgc3R5bGU9Im1heC13aWR0aDogOTBweCIpLm14LWF1dG8ubWItMwogICAgICAgICAgICAgICAgaDQudGV4dC1jZW50ZXIubWItNCBBbsOhbGlzaXMgZGUgcmllc2dvcyB5IHNpbXVsYWNpb25lcwogICAgICAgICAgICAgICAgcC50ZXh0LWNlbnRlciBVc28gZGUgbW9kZWxvcyBwcm9iYWJpbMOtc3RpY29zIHBhcmEgcHJldmVyIGltcGFjdG9zIHkgZGVzYXJyb2xsYXIgZXN0cmF0ZWdpYXMgZGUgbWl0aWdhY2nDs24sIGFudGUgc2l0dWFjaW9uZXMgaW5jaWVydGFzLgoKICAgIC5iZy1mdWxsLXdpZHRoLTIuYmctZm9uZG8tMwogICAgICAucHgtNC5weC1tZC01LnB5LTQKICAgICAgICAucm93Lm1iLTUKICAgICAgICAgIC5jb2wtbGctOAogICAgICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBFbCBlbmZvcXVlIGN1YW50aXRhdGl2byBkZSBsYSBJTyBmYWNpbGl0YSBsYSB0b21hIGRlIGRlY2lzaW9uZXMgZXN0cmF0w6lnaWNhcyBlbiBlbnRvcm5vcyBhbHRhbWVudGUgY29tcGV0aXRpdm9zIHkgZGluw6FtaWNvcy4gQWwgaW1wbGVtZW50YXIgaGVycmFtaWVudGFzIGRlIElPLCBsYXMgZW1wcmVzYXMgcHVlZGVuIHJlc3BvbmRlciBjb24gbWF5b3IgYWdpbGlkYWQgYSBsb3MgY2FtYmlvcyBkZWwgbWVyY2FkbywgbWVqb3JhciBzdSBlZmljaWVuY2lhIG9wZXJhdGl2YSB5IGF1bWVudGFyIHN1IHJlbnRhYmlsaWRhZC4KICAgICAgICAKICAgICAgICAgICAgLmJnLWNvbG9yLTIucC00CiAgICAgICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS84LnN2ZyIsIHN0eWxlPSJtYXgtd2lkdGg6IDkwcHgiKS5teC1hdXRvCiAgICAgICAgICAgICAgICAuY29sLWxnCiAgICAgICAgICAgICAgICAgIHAubWItMCBBZGVtw6FzLCBsYSBldm9sdWNpw7NuIHRlY25vbMOzZ2ljYSBoYSBpbXB1bHNhZG8gbGEgYXBsaWNhY2nDs24gZGUgbGEgSU8gZW4gbnVldmFzIMOhcmVhcywgY29tbyBsYSBpbnRlbGlnZW5jaWEgYXJ0aWZpY2lhbCB5IGVsIGFuw6FsaXNpcyBkZSBCaWcgRGF0YSwgcGVybWl0aWVuZG8gbGEgYXV0b21hdGl6YWNpw7NuIGRlIHByb2Nlc29zIGRlIHRvbWEgZGUgZGVjaXNpb25lcyBlbiB0aWVtcG8gcmVhbC4gRXN0byBoYSBnZW5lcmFkbyB1biBpbXBhY3RvIHNpZ25pZmljYXRpdm8gZW4gc2VjdG9yZXMgY29tbyBlbCBjb21lcmNpbyBlbGVjdHLDs25pY28sIGxhIGJhbmNhIHkgbGEgc2FsdWQsIGRvbmRlIGxhIHRvbWEgZGUgZGVjaXNpb25lcyBiYXNhZGEgZW4gZGF0b3Mgc2UgaGEgY29udmVydGlkbyBlbiB1biBmYWN0b3IgZGV0ZXJtaW5hbnRlIHBhcmEgZWwgw6l4aXRvIGVtcHJlc2FyaWFsLiAKICAgICAgICAKICAgICAgICAgIC5jb2wtbGctNAogICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS85LnBuZyIsIGRhdGEtYW9zPSJ6b29tLWluIikKCiAgICAgICAgaDIubWItNCBCaWcgRGF0YTogI1tzdHJvbmcgdHJhbnNmb3JtYWNpw7NuIGRlIGxhIElPIGVuIGxhIHRvbWEgZGUgZGVjaXNpb25lc10KCiAgICAgICAgcCBFbCBCaWcgRGF0YSBoYSByZXZvbHVjaW9uYWRvIGxhIEludmVzdGlnYWNpw7NuIGRlIE9wZXJhY2lvbmVzLCBhbCBwZXJtaXRpciBlbCBhbsOhbGlzaXMgZGUgZ3JhbmRlcyB2b2zDum1lbmVzIGRlIGRhdG9zIGVuIHRpZW1wbyByZWFsLiBTdSBpbnRlZ3JhY2nDs24gZW4gbGEgSU8gcHJvcG9yY2lvbmEgdW5hIHZlbnRhamEgY29tcGV0aXRpdmEgYWwgbWVqb3JhciBsYSBwcmVjaXNpw7NuIGRlIGxvcyBtb2RlbG9zIHByZWRpY3Rpdm9zIHkgb3B0aW1pemFyIGxhIHRvbWEgZGUgZGVjaXNpb25lcyBlc3RyYXTDqWdpY2FzLiBMYXMgYXBsaWNhY2lvbmVzIGNsYXZlcyBkZSBCaWcgRGF0YSBlbiBJTywgaW5jbHV5ZW46CgogICAgICAgIGRpdi5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1zdHJldGNoCiAgICAgICAgICBkaXYuY29sLWxnLTMubWItNChkYXRhLWFvcz0iem9vbS1pbi11cCIpCiAgICAgICAgICAgIGRpdi5iZy1jb2xvci13aGl0ZS5ib3gtc2hhZG93LnB4LTQucHktNS5oLTEwMAogICAgICAgICAgICAgIGltZy5teC1hdXRvLmQtYmxvY2subWItNCgKICAgICAgICAgICAgICAgIHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvdGFyamV0YS0xLnN2ZyIKICAgICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiA5MHB4IgogICAgICAgICAgICAgICkKICAgICAgICAgICAgICBoNC50ZXh0LWNlbnRlci5tYi00IFByZWRpY2Npw7NuIGRlIGxhIGRlbWFuZGEKICAgICAgICAgICAgICBwLm1iLTAudGV4dC1jZW50ZXIgQW7DoWxpc2lzIGRlIHBhdHJvbmVzIGRlIGNvbnN1bW8sIHBhcmEgYW50aWNpcGFyIG5lY2VzaWRhZGVzIGRlbCBtZXJjYWRvLgogICAgICAgIAogICAgICAgICAgZGl2LmNvbC1sZy0zLm1iLTQoZGF0YS1hb3M9Inpvb20taW4tdXAiKQogICAgICAgICAgICBkaXYuYmctY29sb3Itd2hpdGUuYm94LXNoYWRvdy5weC00LnB5LTUuaC0xMDAKICAgICAgICAgICAgICBpbWcubXgtYXV0by5kLWJsb2NrLm1iLTQoCiAgICAgICAgICAgICAgICBzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExL3RhcmpldGEtMi5zdmciCiAgICAgICAgICAgICAgICBhbHQ9IiIKICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogOTBweCIKICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgaDQudGV4dC1jZW50ZXIubWItNCBPcHRpbWl6YWNpw7NuIGVuIHRpZW1wbyByZWFsCiAgICAgICAgICAgICAgcC5tYi0wLnRleHQtY2VudGVyIEFkYXB0YWNpw7NuIGRpbsOhbWljYSBkZSBlc3RyYXRlZ2lhcyBvcGVyYXRpdmFzLCBmcmVudGUgYSBjYW1iaW9zIGRlbCBlbnRvcm5vLgogICAgICAgIAogICAgICAgICAgZGl2LmNvbC1sZy0zLm1iLTQoZGF0YS1hb3M9Inpvb20taW4tdXAiKQogICAgICAgICAgICBkaXYuYmctY29sb3Itd2hpdGUuYm94LXNoYWRvdy5weC00LnB5LTUuaC0xMDAKICAgICAgICAgICAgICBpbWcubXgtYXV0by5kLWJsb2NrLm1iLTQoCiAgICAgICAgICAgICAgICBzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExL3RhcmpldGEtMy5zdmciCiAgICAgICAgICAgICAgICBhbHQ9IiIKICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogOTBweCIKICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgaDQudGV4dC1jZW50ZXIubWItNCBBbsOhbGlzaXMgYXZhbnphZG8gZGUgY2xpZW50ZXMKICAgICAgICAgICAgICBwLm1iLTAudGV4dC1jZW50ZXIgU2VnbWVudGFjacOzbiBwcmVjaXNhIHBhcmEgcGVyc29uYWxpemFyIHByb2R1Y3RvcyB5IHNlcnZpY2lvcy4KICAgICAgICAKICAgIAogICAgICAgICAgZGl2LmNvbC1sZy0zLm1iLTQoZGF0YS1hb3M9Inpvb20taW4tdXAiKQogICAgICAgICAgICBkaXYuYmctY29sb3Itd2hpdGUuYm94LXNoYWRvdy5weC00LnB5LTUuaC0xMDAKICAgICAgICAgICAgICBpbWcubXgtYXV0by5kLWJsb2NrLm1iLTQoCiAgICAgICAgICAgICAgICBzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExL3RhcmpldGEtNC5zdmciCiAgICAgICAgICAgICAgICBhbHQ9IiIKICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogOTBweCIKICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgaDQudGV4dC1jZW50ZXIubWItNCBNZWpvcmEgZGUgbGEgZWZpY2llbmNpYSBvcGVyYXRpdmEKICAgICAgICAgICAgICBwLm1iLTAudGV4dC1jZW50ZXIgSWRlbnRpZmljYWNpw7NuIGRlIGN1ZWxsb3MgZGUgYm90ZWxsYSB5IG9wdGltaXphY2nDs24gZGUgcmVjdXJzb3MsIG1lZGlhbnRlIGFuw6FsaXNpcyBwcmVkaWN0aXZvcy4KCgogICAgaDIubWItNCBJbnRlbGlnZW5jaWEgQXJ0aWZpY2lhbCAoSUEpOiBpbm5vdmFjacOzbiBlbiBsYSBJTyBlbXByZXNhcmlhbAoKICAgIHAgTGEgSW50ZWxpZ2VuY2lhIEFydGlmaWNpYWwgKElBKSBjb21wbGVtZW50YSB5IHBvdGVuY2lhIGxhIElPLCBhbCBhdXRvbWF0aXphciBwcm9jZXNvcyB5IG9mcmVjZXIgY2FwYWNpZGFkZXMgYXZhbnphZGFzIGRlIGFwcmVuZGl6YWplIHkgYW7DoWxpc2lzLiBTdXMgYXBsaWNhY2lvbmVzIGVuIGxhIHRvbWEgZGUgZGVjaXNpb25lcyBlbXByZXNhcmlhbGVzLCBpbmNsdXllbjoKCgogICAgLmJnLWZ1bGwtd2lkdGguYmctZm9uZG8tc2xpZGVyLm1iLTUKICAgICAgLnAtNC5wLW1kLTUKICAgICAgICBTbHlkZXJBKHRpcG89ImIiKS5iZy13aGl0ZQogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIucC00LnAtbWQtNQogICAgICAgICAgICAuY29sLWxnLTUKICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExL3NsaWRlLTEucG5nIikKICAgICAgICAgICAgLmNvbC1sZy03CiAgICAgICAgICAgICAgaDUgQXV0b21hdGl6YWNpw7NuIGRlIGRlY2lzaW9uZXMKICAgICAgICAgICAgICBwIFNpc3RlbWFzIHF1ZSBhbmFsaXphbiBncmFuZGVzIGNvbmp1bnRvcyBkZSBkYXRvcyB5IHRvbWFuIGRlY2lzaW9uZXMgb3BlcmF0aXZhcywgZW4gdGllbXBvIHJlYWwuCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlci5wLTQucC1tZC01CiAgICAgICAgICAgIC5jb2wtbGctNQogICAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvc2xpZGUtMi5wbmciKQogICAgICAgICAgICAuY29sLWxnLTcKICAgICAgICAgICAgICBoNSBNb2RlbG9zIHByZWRpY3Rpdm9zIGF2YW56YWRvcwogICAgICAgICAgICAgIHAgQWxnb3JpdG1vcyBkZSBhcHJlbmRpemFqZSBhdXRvbcOhdGljbyBxdWUgaWRlbnRpZmljYW4gcGF0cm9uZXMgY29tcGxlam9zIHkgc3VnaWVyZW4gZXN0cmF0ZWdpYXMgw7NwdGltYXMuCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlci5wLTQucC1tZC01CiAgICAgICAgICAgIC5jb2wtbGctNQogICAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvc2xpZGUtMy5wbmciKQogICAgICAgICAgICAuY29sLWxnLTcKICAgICAgICAgICAgICBoNSBPcHRpbWl6YWNpw7NuIGRlIHByb2Nlc29zCiAgICAgICAgICAgICAgcCBJQSBxdWUgYWp1c3RhIGNvbnRpbnVhbWVudGUgb3BlcmFjaW9uZXMgcGFyYSBtYXhpbWl6YXIgbGEgcmVudGFiaWxpZGFkIHkgZWZpY2llbmNpYS4KICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyLnAtNC5wLW1kLTUKICAgICAgICAgICAgLmNvbC1sZy01CiAgICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS9zbGlkZS0zLnBuZyIpCiAgICAgICAgICAgIC5jb2wtbGctNwogICAgICAgICAgICAgIGg1IEdlc3Rpw7NuIGRlIHJpZXNnb3MKICAgICAgICAgICAgICBwIEhlcnJhbWllbnRhcyBxdWUgZXZhbMO6YW4gcG9zaWJsZXMgZXNjZW5hcmlvcyB5IHByb3BvbmVuIHBsYW5lcyBkZSBtaXRpZ2FjacOzbiBwcm9hY3Rpdm9zLgogICAgCiAgICBwIExhIGNvbWJpbmFjacOzbiBkZSBCaWcgRGF0YSB5IGxhIEludGVsaWdlbmNpYSBBcnRpZmljaWFsIGVuIGxhIEludmVzdGlnYWNpw7NuIGRlIE9wZXJhY2lvbmVzLCBpbXB1bHNhIHVuYSB0b21hIGRlIGRlY2lzaW9uZXMgbcOhcyDDoWdpbCwgcHJlY2lzYSB5IGVzdHJhdMOpZ2ljYS4gRW4gc2VjdG9yZXMgY29tbyBlbCBjb21lcmNpbyBlbGVjdHLDs25pY28sIGxhIGJhbmNhIHkgbGEgc2FsdWQsIGVzdGEgc2luZXJnaWEgaGEgZGVtb3N0cmFkbyBzZXIgdW4gZmFjdG9yIGRldGVybWluYW50ZSBwYXJhIGVsIMOpeGl0byBlbXByZXNhcmlhbCwgYWwgbWVqb3JhciBsYSByZW50YWJpbGlkYWQgeSByZXNwb25kZXIgZWZpY2F6bWVudGUgYSBsb3MgY2FtYmlvcyBkZWwgbWVyY2Fkby4KCiAgICAuYmctZnVsbC13aWR0aC5iZy1jb2xvci00CiAgICAgIC5weC00LnAtbWQtNQogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctOAogICAgICAgICAgICBoMi5tYi00KGRhdGEtYW9zPSJmbGlwLXVwIikgSW50ZWdyYWNpw7NuIGRlbCBCaWcgRGF0YSB5IGxhIEludGVsaWdlbmNpYSBBcnRpZmljaWFsCiAgICAgICAgICAgIHAubWItNChkYXRhLWFvcz0iZmFkZS1yaWdodCIpIExhIGludGVncmFjacOzbiBkZWwgQmlnIERhdGEgeSBsYSBJbnRlbGlnZW5jaWEgQXJ0aWZpY2lhbCAoSUEpIGVzdMOhIHJldm9sdWNpb25hbmRvIGxhIHRvbWEgZGUgZGVjaXNpb25lcyBlbiBsYXMgb3JnYW5pemFjaW9uZXMsIHBlcm1pdGllbmRvIG9wdGltaXphciBwcm9jZXNvcywgYW50aWNpcGFyIHRlbmRlbmNpYXMgeSBtZWpvcmFyIGxhIGVmaWNpZW5jaWEgb3BlcmF0aXZhLiBFbiBlbCBQREYgSW50ZWdyYWNpw7NuIGRlbCBCaWcgRGF0YSB5IGxhIEludGVsaWdlbmNpYSBBcnRpZmljaWFsLCBzZSAgYW5hbGl6YW4gbGFzIGFwbGljYWNpb25lcyBjbGF2ZSBkZSBlc3RhcyB0ZWNub2xvZ8OtYXMgZW4gbGEgSW52ZXN0aWdhY2nDs24gZGUgT3BlcmFjaW9uZXMsIGFib3JkYW5kbyBzdSBpbXBhY3RvIGVuIGxhIG9wdGltaXphY2nDs24gZGUgbGEgY2FkZW5hIGRlIHN1bWluaXN0cm8sIGVsIG1hbnRlbmltaWVudG8gcHJlZGljdGl2bywgbGEgcGVyc29uYWxpemFjacOzbiBkZSBsYSBleHBlcmllbmNpYSBkZWwgY2xpZW50ZSB5IGxhIHRvbWEgZGUgZGVjaXNpb25lcyBlc3RyYXTDqWdpY2FzLiBBIHRyYXbDqXMgZGUgZWplbXBsb3MgcHLDoWN0aWNvcywgc2UgZXhwbG9yYSBjw7NtbyBsYXMgZW1wcmVzYXMgcHVlZGVuIGFwcm92ZWNoYXIgbGEgYXV0b21hdGl6YWNpw7NuIHkgZWwgYW7DoWxpc2lzIGRlIGRhdG9zIGVuIHRpZW1wbyByZWFsIHBhcmEgb2J0ZW5lciB2ZW50YWphcyBjb21wZXRpdGl2YXMgZW4gdW4gZW50b3JubyBkaW7DoW1pY28geSBlbiBjb25zdGFudGUgZXZvbHVjacOzbi4KICAgIAogICAgICAgICAgICBhLmFuZXhvLm1iLTQuYmctd2hpdGUudy1maXQoOmhyZWY9Im9idGVuZXJMaW5rKCcvZG93bmxvYWRzL0FuZXhvXzEucGRmJykiIHRhcmdldD0iX2JsYW5rIikoZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICAgICAgICAgIC5hbmV4b19faWNvbm8oOnN0eWxlPSJ7J2JhY2tncm91bmQtY29sb3InOiAnI0ZDREZEQid9IikKICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL3RlbXBsYXRlL2ljb25vLXBkZi5zdmciKQogICAgICAgICAgICAgIC5hbmV4b19fdGV4dG8KICAgICAgICAgICAgICAgIHAgPHN0cm9uZz5BbmV4by4gPC9zdHJvbmc+IEludGVncmFjacOzbiBkZWwgQmlnIERhdGEgeSBsYSBJbnRlbGlnZW5jaWEgQXJ0aWZpY2lhbAogICAgCiAgICAgICAgICAuY29sLWxnLTQKICAgICAgICAgICAgZmlndXJlKGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMS8xMC5wbmcnLCBhbHQ9JycpCiAgICAKCgogICAgLmJnLWZ1bGwtd2lkdGguYm9yZGVyLXRvcC5jb2xvci1wcmltYXJpbwogICAgICAucC00LnAtbWQtNQogICAgICAgIGgyKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBNQVRFUklBTCBDT01QTEVNRU5UQVJJTwogICAgICAgIC5yb3cubWF0ZXJpYWwtY29tcGxlbWVudGFyaW8KICAgICAgICAgIC5jb2wtMTIuY29sLW1kLTYuY29sLWxnLTcKICAgICAgICAgICAgcCBMb3MgaW52aXRhbW9zIGEgZXhwbG9yYXIgZWwgbWF0ZXJpYWwgY29tcGxlbWVudGFyaW8gZGUgZXN0ZSBjdXJzbywgZW4gZXN0YSBzZWNjacOzbiBlbmNvbnRyYXLDoSByZWN1cnNvcyBxdWUgbGUgcGVybWl0aXLDoW4gcHJvZnVuZGl6YXIgIHkgZW5yaXF1ZWNlciBzdSBhcHJlbmRpemFqZSBlbiBsb3MgdGVtYXMgdHJhdGFkb3MgZW4gZXN0YSB1bmlkYWQuCgogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy90ZW1wbGF0ZS9pY29uby15dC5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1BcmhQNDBGd3B5dyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciIpIFJvamFzIEx1Z28gTWFyaWFuYSAoMjAxNCkuIMK/UXXDqSBlcyBsYSBJbnZlc3RpZ2FjacOzbiBkZSBPcGVyYWNpb25lcz8KCiAgICAgICAgICAuY29sLTEyLmNvbC1tZC02LmNvbC1sZy0zLm9mZnNldC1sZy0xCiAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2NvbXBvbmVudGVzL21hdGVyaWFsLWNvbXBsZW1lbnRhcmlvLnN2ZycsIGFsdD0nJykKCg=="},null]}